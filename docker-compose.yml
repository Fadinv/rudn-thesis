services:
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: portfolio_db
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    env_file:
      - ./.env.shared
      - ./apps/backend/.env.local
    ports:
      - "4000:4000"
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/portfolio_db
    volumes:
      - .:/monorepo
    working_dir: /monorepo/apps/backend
    command: npm run start:dev

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_FORCE_SWCPACKAGE=@next/swc-wasm-nodejs
    depends_on:
      - backend
    volumes:
      - .:/monorepo
      - /monorepo/node_modules
    working_dir: /monorepo/apps/frontend
    command: npm run dev

  ticker-updater:
    build:
      context: .
      dockerfile: apps/ticker-updater/Dockerfile
    env_file:
      - ./.env.shared
      - ./apps/ticker-updater/.env.local
    depends_on:
      - backend
      - postgres
      - redis
    volumes:
      - .:/monorepo
    working_dir: /monorepo/apps/ticker-updater
    command: npm run start:dev

  analyzer:
    build: ./apps/analyzer
    ports:
      - "8001:8001"
    env_file:
      - ./.env.shared
    volumes:
      - ./apps/analyzer:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8001

  invite-bot:
    build:
      context: .
      dockerfile: apps/invite-bot/Dockerfile
    env_file:
      - ./.env.shared
      - ./apps/invite-bot/.env.local
    depends_on:
      - backend
      - redis
    volumes:
      - .:/monorepo
    command: npm run start:dev

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"     # для приложений (AMQP)
      - "15672:15672"   # UI-доступ
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  redis-data:
  grafana-storage: