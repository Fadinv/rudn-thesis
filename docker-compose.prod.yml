services:
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: portfolio_db
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    env_file:
      - ./.env.shared
      - ./apps/backend/.env.local
    environment:
      - NODE_ENV=production
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
    command: sh -c "npm install && npm run start"

  ticker-updater:
    build:
      context: .
      dockerfile: apps/ticker-updater/Dockerfile
    env_file:
      - ./.env.shared
      - ./apps/ticker-updater/.env.local
    environment:
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/ticker-updater:/app
    command: sh -c "npm install && npm run start"

  analyzer:
    build: ./apps/analyzer
    ports:
      - "8001:8001"
    env_file:
      - ./.env.shared
    environment:
      - UVICORN_CMD=uvicorn main:app --host 0.0.0.0 --port 8001 --limit-max-request-size 100000000
    volumes:
      - ./apps/analyzer:/app

volumes:
  postgres-data:
