import {Bot, Context, InlineKeyboard} from 'grammy';
import {findOrCreateUserAndToken} from '../services/invite.service';

export function registerCommands(bot: Bot) {
	bot.command('start', async (ctx) => {
		const keyboard = new InlineKeyboard().text('üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'entry');
		await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã', {
			reply_markup: keyboard,
		});
	});

	bot.command('entry', async (ctx) => {
		await handleEntry(ctx);
	});

	bot.callbackQuery('entry', async (ctx) => {
		await ctx.answerCallbackQuery();
		await handleEntry(ctx);
	});

	bot.command('buttons', async (ctx) => {
		const keyboard = new InlineKeyboard()
			.text('–ö–Ω–æ–ø–∫–∞ 1', 'btn-1')
			.text('–ö–Ω–æ–ø–∫–∞ 2', 'btn-2');

		await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:', {reply_markup: keyboard});
	});

	bot.callbackQuery('btn-1', async (ctx) => {
		await ctx.answerCallbackQuery();
		await ctx.reply('–¢—ã –Ω–∞–∂–∞–ª –ö–Ω–æ–ø–∫—É 1!');
	});

	bot.callbackQuery('btn-2', async (ctx) => {
		await ctx.answerCallbackQuery();
		await ctx.reply('–¢—ã –Ω–∞–∂–∞–ª –ö–Ω–æ–ø–∫—É 2!');
	});
}

async function handleEntry(ctx: Context) {
	const telegramId = ctx.from?.id?.toString();
	if (!telegramId) {
		await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID');
		return;
	}

	const {email, password, loginUrl, isNew} = await findOrCreateUserAndToken(telegramId);

	let message: string;

	if (isNew && password) {
		message = `user: ${email}\npass: ${password}\n\n${loginUrl}\n\n‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`;
	} else {
		message = `üîó –í—Ö–æ–¥:\n${loginUrl}\n\n‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`;
	}

	await ctx.reply(message);
}
