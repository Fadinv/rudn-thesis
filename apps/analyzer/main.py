from fastapi import FastAPI
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
from prometheus_client import PROCESS_COLLECTOR, PLATFORM_COLLECTOR
from starlette.responses import Response
from routers.optimization_routes import router as optimization_router
from rabbit_consumer import consume
import asyncio

app = FastAPI()

# –í–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (CPU, –ø–∞–º—è—Ç—å –∏ —Ç.–ø.)
PROCESS_COLLECTOR.collect()
PLATFORM_COLLECTOR.collect()

@app.get("/metrics")
def metrics():
    return Response(generate_latest(), media_type=CONTENT_TYPE_LATEST)

app.include_router(optimization_router)

@app.on_event("startup")
async def startup_event():
    async def start_consumer_with_retry():
        import time
        while True:
            try:
                print("üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ RabbitMQ...", flush=True)
                await consume()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.", flush=True)
                time.sleep(5)  # sync sleep, –º–æ–∂–Ω–æ –∏ asyncio.sleep(5), –µ—Å–ª–∏ –≤—Å—ë async
    asyncio.create_task(start_consumer_with_retry())
