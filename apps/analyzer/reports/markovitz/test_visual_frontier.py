import os
import numpy as np
import matplotlib.pyplot as plt
from reports.markovitz.optimizer import calculate_markowitz_efficient_frontier

def test_plot_efficient_frontier():
    """
    –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ‚Äî –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –®–∞—Ä–ø–∞.
    """
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    base = np.random.normal(0.001, 0.01, size=(100, 1))
    noise = np.random.normal(0, 0.005, size=(100, 3))
    returns = base + noise
    tickers = ["A", "B", "C"]
    rf = 0.01

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
    frontier = calculate_markowitz_efficient_frontier(returns, tickers, rf, num_portfolios=50)

    risks = np.array([p["risk"] for p in frontier])
    returns_ = np.array([p["return"] for p in frontier])
    sharpes = np.array([(ret - rf) / risk if risk > 0 else 0 for ret, risk in zip(returns_, risks)])

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("test_output", exist_ok=True)

    # üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(8, 5))
    scatter = plt.scatter(risks, returns_, c=sharpes, cmap="viridis", edgecolors="k")
    plt.xlabel("–†–∏—Å–∫ (std)")
    plt.ylabel("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
    plt.title("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Ü–≤–µ—Ç ‚Äî Sharpe Ratio)")
    plt.grid(True)
    cbar = plt.colorbar(scatter)
    cbar.set_label("Sharpe Ratio")
    plt.tight_layout()
    plt.savefig("test_output/efficient_frontier.png")
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: test_output/efficient_frontier.png")
