import numpy as np
from scipy.optimize import minimize
from sklearn.covariance import LedoitWolf
from .risk_metrics import calculate_sortino_ratio, calculate_beta

def calculate_markowitz_efficient_frontier(returns: np.ndarray, tickers: list, risk_free_rate: float, num_portfolios: int = 20):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ –º–æ–¥–µ–ª–∏ –ú–∞—Ä–∫–æ–≤–∏—Ü–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π."""
    n_assets = returns.shape[1]
    mean_returns = np.mean(returns, axis=0)
    cov_matrix = LedoitWolf().fit(returns).covariance_

    # 1Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º
    def min_risk_objective(weights):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))

    constraints = [{'type': 'eq', 'fun': lambda w: np.sum(w) - 1}]
    bounds = tuple((0, 1) for _ in range(n_assets))

    result_min_risk = minimize(min_risk_objective, np.ones(n_assets) / n_assets, bounds=bounds, constraints=constraints)

    min_risk_portfolio = {
        "risk": np.sqrt(np.dot(result_min_risk.x.T, np.dot(cov_matrix, result_min_risk.x))),
        "return": np.dot(result_min_risk.x, mean_returns),
        "weights": dict(zip(tickers, result_min_risk.x.tolist()))
    }

    # 2Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é
    def max_return_objective(weights):
        return -np.dot(weights, mean_returns)  # –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏)

    result_max_return = minimize(max_return_objective, np.ones(n_assets) / n_assets, bounds=bounds, constraints=constraints)

    max_return_portfolio = {
        "risk": np.sqrt(np.dot(result_max_return.x.T, np.dot(cov_matrix, result_max_return.x))),
        "return": np.dot(result_max_return.x, mean_returns),
        "weights": dict(zip(tickers, result_max_return.x.tolist()))
    }

    # 3Ô∏è‚É£ –°—Ç—Ä–æ–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
    min_risk = min_risk_portfolio["risk"]
    max_risk = max_return_portfolio["risk"]

    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
    target_risks = np.linspace(min_risk, max_risk, num_portfolios)

    efficient_frontier = []
    prev_return = float('-inf')

    for target_risk in target_risks:
        initial_weights = np.ones(n_assets) / n_assets

        def sharpe_objective(weights):
            port_return = np.dot(weights, mean_returns)
            port_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
            return -((port_return - risk_free_rate) / port_volatility)

        constraints = [
            {'type': 'eq', 'fun': lambda w: np.sum(w) - 1},
            {'type': 'eq', 'fun': lambda w: np.sqrt(np.dot(w.T, np.dot(cov_matrix, w))) - target_risk}
        ]

        result = minimize(sharpe_objective, initial_weights, bounds=bounds, constraints=constraints)

        if result.success:
            port_return = np.dot(result.x, mean_returns)
            port_volatility = np.sqrt(np.dot(result.x.T, np.dot(cov_matrix, result.x)))
            sharpe_ratio = (port_return - risk_free_rate) / port_volatility if port_volatility > 0 else 0

            # ‚ùå –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–∏, –µ—Å–ª–∏ –∏—Ö —Ä–∏—Å–∫ –≤—ã—à–µ max_risk, –Ω–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∏–∂–µ max_return
            if port_volatility > max_return_portfolio["risk"] and port_return < max_return_portfolio["return"]:
                continue

            # üî• –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç—É—â–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if port_return > prev_return:
                efficient_frontier.append({
                    "risk": port_volatility,
                    "return": port_return,
                    "sharpe_ratio": sharpe_ratio,
                    "weights": dict(zip(tickers, result.x.tolist()))
                })
                prev_return = port_return

    # 4Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–∏ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    efficient_frontier.sort(key=lambda x: x["return"])

    return efficient_frontier
