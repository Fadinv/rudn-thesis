# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Stock {
  id: Float!
  ticker: String!
  name: String!
  market: String!
  locale: String!
  primaryExchange: String!
  type: String
  active: Boolean!
  currencyName: String!
  cik: String
  compositeFigi: String
  shareClassFigi: String
  lastUpdatedUtc: String!
  logoUrl: String

  """Источник данных"""
  source: String!

  """Для отображения или уточнения биржи NASDAQ / MOEX"""
  exchange: String!

  """Если true - то это индекс"""
  isIndex: Boolean!
}

type PortfolioStock {
  id: Int!
  portfolio: Portfolio!
  stock: Stock!
  quantity: Int
  averagePrice: Float
}

type PortfolioReport {
  id: String!
  portfolio: Portfolio!
  reportType: String!
  data: JSON
  status: String!
  errorMessage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Portfolio {
  id: Int!
  name: String!
  user: User!
  stocks: [PortfolioStock!]!
  isReadyForAnalysis: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  reports: [PortfolioReport!]!
}

type User {
  id: Int!
  email: String!
  portfolios: [Portfolio!]
}

type StockPrice {
  ticker: String!
  date: String!
  open: Float!
  high: Float!
  low: Float!
  close: Float!
  volume: Float
}

type PortfolioDistribution {
  stocks: [String!]!
  quantities: [Int!]!
  averagePrices: [Float!]!
  remainingCapital: Float!
}

type Query {
  currentUser: User
  getStocks: [Stock!]!
  getStockById(id: Int!): Stock
  getStockByTicker(ticker: String!): Stock
  searchStocks(search: String!): [Stock!]!
  getUserPortfolios: [Portfolio!]!
  getPortfolioStocks(portfolioId: Int!): [PortfolioStock!]!
  getStockPrices(ticker: String!, from: Float, to: Float): [StockPrice!]!
  getDistributedPortfolioAssets(capital: Float!, stockTickerList: [String!]!, weights: [Float!]!): PortfolioDistribution!
  getPortfolioReport(reportId: String!): PortfolioReport
  getPortfolioReports(portfolioId: Int!): [PortfolioReport!]!
}

type Mutation {
  register(email: String!, password: String!): String!
  login(email: String!, password: String!): String!
  loginByToken(token: String!): String!
  logout: Boolean!
  createStock(data: StockInput!): Stock!
  updateStock(id: Float!, data: StockInput!): Stock!
  deleteStock(id: Float!): Boolean!
  deleteAllStocks: Boolean!
  createPortfolio(name: String!, stocks: [StocksWhileCreatingPortfolio!]): Portfolio!
  addStockToPortfolio(portfolioId: Int!, stockId: Int!, quantity: Int!, averagePrice: Float!): PortfolioStock!
  updatePortfolioStock(portfolioStockId: Int!, quantity: Int, averagePrice: Float): PortfolioStock!
  deletePortfolioStock(portfolioStockId: Int!): Boolean!
  updatePortfolioStocks(updates: [PortfolioStockUpdateInput!]!): [PortfolioStock!]!
  deletePortfolio(portfolioId: Int!): Boolean!
  updatePortfolio(portfolioId: Int!, newName: String!): Portfolio!
  createMarkovitzReport(portfolioId: Int!, input: MarkovitzReportInput!): PortfolioReport!
  createFutureReturnForecastGBMReport(portfolioId: Int!, input: FutureReturnForecastInput!): PortfolioReport!
  deletePortfolioReport(reportId: String!): Boolean!
}

input StockInput {
  ticker: String!
  name: String!
  market: String!
  locale: String!
  primaryExchange: String!
  type: String!
  active: Boolean!
  currencyName: String!
  cik: String
  compositeFigi: String
  shareClassFigi: String
  lastUpdatedUtc: String!
  logoUrl: String
}

input StocksWhileCreatingPortfolio {
  stockTicker: String!
  quantity: Int!
  averagePrice: Float!
}

input PortfolioStockUpdateInput {
  portfolioStockId: Int!
  quantity: Int
  averagePrice: Float
}

input MarkovitzReportInput {
  currency: String
  additionalTickers: [String!]
  dateRange: String
  riskFreeRate: Float
  numPortfolios: Int
  covMethod: String
}

input FutureReturnForecastInput {
  currency: String
  selectedPercentiles: [Float!]!
  forecastHorizons: [Float!]!
  dateRange: String
}