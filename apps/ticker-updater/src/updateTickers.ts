import axios from 'axios';
import {Client} from 'pg';
import {SP500List} from './SP500List';

const API_KEY = process.env.POLYGON_API_KEY!;
const DB_URL = process.env.DATABASE_URL!;
const STOCK_API_URL = `https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit=1000&apiKey=${API_KEY}`;

const FROM_DATE = new Date(new Date().setFullYear(new Date().getFullYear() - 3))
	.toISOString()
	.split('T')[0];
const TO_DATE = new Date().toISOString().split('T')[0];

const REQUEST_DELAY = 250;
const MAX_RETRIES = 5;

const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

async function fetchWithRetry(url: string, retries = MAX_RETRIES) {
	for (let attempt = 1; attempt <= retries; attempt++) {
		try {
			const response = await axios.get(url);
			return response.data;
		} catch (error: any) {
			if (error.response?.status === 429) {
				console.warn(`‚ö†Ô∏è 429 Too Many Requests. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
				await sleep(5000);
				return fetchWithRetry(url, retries);
			} else {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
				return null;
			}
		}
	}
	return null;
}

// üè¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π
async function fetchTickers() {
	let tickers: any[] = [];
	let nextUrl: string | null = STOCK_API_URL;

	try {
		while (nextUrl) {
			console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ --- ', nextUrl);
			const data = await fetchWithRetry(nextUrl);
			if (data.results?.length) tickers = [...tickers, ...data.results];
			nextUrl = data?.next_url ? `${data.next_url}&apiKey=${API_KEY}` : null;
		}
	} catch (error) {
		nextUrl = null;
		console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API:', error, nextUrl);
	}

	console.log('tickers', tickers.length);
	return tickers;
}

// üìà –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —Ç–∏–∫–µ—Ä–∞
async function fetchTickerDetails(ticker: string) {
	await sleep(REQUEST_DELAY);
	const url = `https://api.polygon.io/v3/reference/tickers/${ticker}?apiKey=${API_KEY}`;
	return fetchWithRetry(url);
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
async function updateStockPrices(client: Client, ticker: string) {
	try {
		// üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ç–∏–∫–µ—Ä–∞
		const {rows} = await client.query(
			`SELECT MAX(date) AS last_date FROM stock_prices WHERE ticker = $1`,
			[ticker],
		);

		let fromDate = FROM_DATE; // üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π FROM_DATE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if (rows[0]?.last_date) { // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
			const lastDate = new Date(rows[0].last_date);
			lastDate.setDate(lastDate.getDate() + 1); // ‚è© –î–≤–∏–≥–∞–µ–º –¥–∞—Ç—É –≤–ø–µ—Ä–µ–¥ –Ω–∞ 1 –¥–µ–Ω—å
			fromDate = lastDate.toISOString().split('T')[0]; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ YYYY-MM-DD
		}

		const toDate = new Date().toISOString().split('T')[0]; // üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã `fromDate` ‚â§ `toDate`
		if (new Date(fromDate) >= new Date(toDate)) {
			console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker}, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.`);
			return;
		}

		console.log(`üìä –î–æ–≥—Ä—É–∂–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${ticker} —Å ${fromDate} –ø–æ ${toDate}`);

		const response = await fetchWithRetry(
			`https://api.polygon.io/v2/aggs/ticker/${ticker}/range/1/day/${fromDate}/${toDate}?apiKey=${API_KEY}`,
		);

		if (!response || !response.results) return;

		// üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
		const stockPrices = response.results.map((item: any) => ({
			ticker,
			date: new Date(item.t).toISOString().split('T')[0], // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ YYYY-MM-DD
			open: item.o,
			high: item.h,
			low: item.l,
			close: item.c,
			volume: item.v,
		}));

		// üìå –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
		for (const price of stockPrices) {
			await client.query(
				`
                INSERT INTO stock_prices (ticker, date, open, high, low, close, volume)
                VALUES ($1, $2, $3, $4, $5, $6, $7)
                ON CONFLICT (ticker, date) DO NOTHING;
                `,
				[price.ticker, price.date, price.open, price.high, price.low, price.close, price.volume],
			);
		}

		console.log(`‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${ticker} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`);
	} catch (error) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ ${ticker}:`, error);
	}
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –≤ –ë–î
async function updateTickers() {
	const client = new Client({connectionString: DB_URL});
	await client.connect();

	// const tickers = await fetchTickers();
	const tickers: any[] = [];
	if (tickers.length === 0) {
		console.log('‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
		// await client.end();
		// return;
	}

	let count = 0;

	for (const ticker of tickers) {
		if (SP500List.has(ticker.ticker)) {
			let logoUrl: string | null = null;
			try {
				const details = await fetchTickerDetails(ticker.ticker);
				logoUrl = details?.results?.branding?.logo_url || null;
				count++;
			} catch (_) {}

			await client.query(
				`
                  INSERT INTO stock (ticker, name, market, locale, primary_exchange, type, active, currency_name, cik, composite_figi, share_class_figi, last_updated_utc, logo_url)
                  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
                  ON CONFLICT (ticker) DO UPDATE 
                  SET name = EXCLUDED.name, market = EXCLUDED.market, locale = EXCLUDED.locale, primary_exchange = EXCLUDED.primary_exchange, 
                      type = EXCLUDED.type, active = EXCLUDED.active, currency_name = EXCLUDED.currency_name, 
                      cik = EXCLUDED.cik, composite_figi = EXCLUDED.composite_figi, share_class_figi = EXCLUDED.share_class_figi, 
                      last_updated_utc = EXCLUDED.last_updated_utc, logo_url = EXCLUDED.logo_url;
                `,
				[
					ticker.ticker,
					ticker.name,
					ticker.market,
					ticker.locale,
					ticker.primary_exchange,
					ticker.type,
					ticker.active,
					ticker.currency_name,
					ticker.cik || null,
					ticker.composite_figi || null,
					ticker.share_class_figi || null,
					ticker.last_updated_utc,
					logoUrl,
				],
			);
		}
	}

	const result = await client.query('SELECT ticker FROM stock');
	const insertedTickers = new Set<string>(); // –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–ª–∏ –≤ –ë–î
	result.rows.forEach(row => insertedTickers.add(row.ticker));

	console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${insertedTickers.size} —Ç–∏–∫–µ—Ä–æ–≤.`);

	// üî• üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î
	for (const ticker of insertedTickers) {
		await updateStockPrices(client, ticker);
	}

	await client.end();
}

export {updateTickers};
