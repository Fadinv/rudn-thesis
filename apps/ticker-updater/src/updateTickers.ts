import axios from 'axios';
import {Client} from 'pg';
import {SP500List} from './SP500List';

const API_KEY = process.env.POLYGON_API_KEY!;
const DB_URL = process.env.DATABASE_URL!;
const STOCK_API_URL = `https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit=1000&apiKey=${API_KEY}`;

const REQUEST_DELAY = 250; // ‚è≥ 250 –º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
const MAX_RETRIES = 5; // üîÑ –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–æ 5 —Ä–∞–∑

// ‚è≥ –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º API-–∑–∞–ø—Ä–æ—Å–æ–º
const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

// üîÑ –§—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 429 –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function fetchWithRetry(url: string, retries = MAX_RETRIES) {
	for (let attempt = 1; attempt <= retries; attempt++) {
		try {
			const response = await axios.get(url);
			return response.data;
		} catch (error: any) {
			if (error.response?.status === 429) {
				console.warn(`‚ö†Ô∏è 429 Too Many Requests. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
				await sleep(5000); // ‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
				return fetchWithRetry(url, retries);
			} else {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
				return null;
			}
		}
	}
	return null;
}

// üè¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π
async function fetchTickers() {
	let tickers: any[] = [];
	let nextUrl: string | null = STOCK_API_URL;

	try {
		while (nextUrl) {
			console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ --- ', nextUrl);
			const data = await fetchWithRetry(nextUrl);
			if (data.results?.length) tickers = [...tickers, ...data.results];
			nextUrl = data?.next_url ? `${data.next_url}&apiKey=${API_KEY}` : null;
		}
	} catch (error) {
		nextUrl = null;
		console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API:', error, nextUrl);
	}

	console.log('tickers', tickers.length);
	return tickers;
}

// üìà –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —Ç–∏–∫–µ—Ä–∞
async function fetchTickerDetails(ticker: string) {
	await sleep(REQUEST_DELAY); // ‚è≥ –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

	const url = `https://api.polygon.io/v3/reference/tickers/${ticker}?apiKey=${API_KEY}`;
	return fetchWithRetry(url);
}

const tickersStrings = new Set<string>();

// üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –≤ –ë–î
async function updateTickers() {
	const client = new Client({connectionString: DB_URL});
	await client.connect();

	const tickers = await fetchTickers();
	if (tickers.length === 0) {
		console.log('‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
		await client.end();
		return;
	}

	let count = 0;
	for (const ticker of tickers) {
		tickersStrings.add(ticker.ticker);
		if (SP500List.has(ticker.ticker)) {

			let logoUrl: string | null = null;
			try {
				const details = await fetchTickerDetails(ticker.ticker);
				logoUrl = details?.results?.branding?.logo_url || null;
				count++;
			} catch (_) {}

			await client.query(
				`
		      INSERT INTO stock (ticker, name, market, locale, primary_exchange, type, active, currency_name, cik, composite_figi, share_class_figi, last_updated_utc, logo_url)
		      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
		      ON CONFLICT (ticker) DO UPDATE 
		      SET name = EXCLUDED.name, market = EXCLUDED.market, locale = EXCLUDED.locale, primary_exchange = EXCLUDED.primary_exchange, 
		          type = EXCLUDED.type, active = EXCLUDED.active, currency_name = EXCLUDED.currency_name, 
		          cik = EXCLUDED.cik, composite_figi = EXCLUDED.composite_figi, share_class_figi = EXCLUDED.share_class_figi, 
		          last_updated_utc = EXCLUDED.last_updated_utc, logo_url = EXCLUDED.logo_url;
		      `,
				[
					ticker.ticker,
					ticker.name,
					ticker.market,
					ticker.locale,
					ticker.primary_exchange,
					ticker.type,
					ticker.active,
					ticker.currency_name,
					ticker.cik || null,
					ticker.composite_figi || null,
					ticker.share_class_figi || null,
					ticker.last_updated_utc,
					logoUrl,
				],
			);
		}

	}

	console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤.`);
	console.log('tickersStrings', tickersStrings.size);

	SP500List.forEach((value) => {
		if (!tickersStrings.has(value)) {
			console.log('–ù–µ—Ç —Ç–∏–∫–µ—Ä–∞ –∏–∑ S&P500', value);
		}
	})
	await client.end();
}


export {updateTickers};
